@startuml InsertAsync
skinparam {
    monochrome false
    sequenceArrowThickness 2
    maxmessagesize 60
}

title Ablauf Insert-Operation

'deklaration
actor client
participant "InsertAsync\n(entity)" as Insert
participant "Check-\nAuthorizationAsync\n(type, actionName)" as checkauth
participant "Execute-\nInsertAsync\n(entity)" as execute
participant "BeforeReturn\n(entity)" as beforeret
participant "ValidateEntity\n(actionType, entity)" as validate
participant "Before-\nActionExecute\n(actionType, entity)" as beforeaction
participant "Before-\nExecuteInsert\n(entity)" as beforeInsert
participant "EntitySet\n.AddAsync\n(entity)" as add
participant "After-\nExecuteInsert\n(entity)" as afterInsert
participant "After-\nActionExecute\n(actionType, entity)" as afteraction
'declaration

client -> Insert : entity
activate Insert
alt if (ACCOUNT_ON)
    Insert -> checkauth : type, "InsertAsync"
    activate checkauth
    note right: Optional: Aufruf nur wenn ACCOUNT_ON ist
    return
end
Insert -> execute : entity
activate execute

'Beginn: Ablauf ExecuteInsert(...)
execute -> validate : Insert, entity
activate validate
return

execute -> beforeaction : Insert, entity
activate beforeaction
return

execute -> beforeInsert : entity
activate beforeInsert
return

execute -> add : entity
activate add
return

execute -> afterInsert : entity
activate afterInsert
return

execute -> afteraction : Insert, entity
activate afteraction
return

'Ende: Ablauf ExecuteInsert(...)
execute --> Insert : result
deactivate execute

Insert -> beforeret : result
activate beforeret
return result
Insert --> client : result
deactivate Insert
@enduml
